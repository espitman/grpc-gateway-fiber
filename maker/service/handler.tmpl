package main

import (
	"fmt"
	{{.PB}} "{{.PBPath}}"
	"github.com/gofiber/fiber/v2"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"log"
)

type {{.HandlerName}} struct {
	pb {{.PB}}.{{.ClientNameUpper}}
}

func new{{.HandlerNameUpper}}(pb {{.PB}}.{{.ClientNameUpper}}) *{{.HandlerName}} {
	return &{{.HandlerName}}{
		pb: pb,
	}
}

{{ range .Methods }}
func (h *{{$.HandlerName}}) {{.Name}}(c *fiber.Ctx) error {

	header := metadata.New(map[string]string{"authorization": "saeed"})
	ctx := metadata.NewOutgoingContext(c.Context(), header)

	var reqDto {{$.PB}}.{{.In}}
	_ = c.QueryParser(&reqDto)
	_ = c.ParamsParser(&reqDto)
	_ = c.BodyParser(&reqDto)

	fmt.Println(&reqDto)

	res, err := h.pb.{{.Name}}(ctx, &reqDto)

	if err != nil {
		st, _ := status.FromError(err)
		log.Println("err:", st.Code(), st.Message(), st.Details())
		return c.Status(fiber.StatusBadRequest).Send(nil)
	}
	return c.JSON(res)
}
{{ end }}


