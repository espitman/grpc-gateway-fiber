package main

import (
	{{.PB}} "{{.PBPath}}"
	"github.com/gofiber/fiber/v2"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"log"
)

type {{.HandlerName}} struct {
	pb {{.PB}}.{{.ClientNameUpper}}
}

func new{{.HandlerNameUpper}}(pb {{.PB}}.{{.ClientNameUpper}}) *{{.HandlerName}} {
	return &{{.HandlerName}}{
		pb: pb,
	}
}

{{ range .Methods }}
{{if .Enable}}
// {{.Name}}
// @Summary {{.Name}}
// @Description {{.Name}}
// @Tags {{$.Name}}_service
// @Produce json
{{- if .Body }}
// @Param body body {{$.PB}}.{{.In}} true "body"
{{- end }}
{{- range .Params }}{{- if .Name}}
// @Param {{.Name}} {{.Kind}} {{.Type}} {{.Required}} "{{.Name}}"
{{- end }}{{- end }}
// @Success 200 {object} {{$.PB}}.{{.Out}}
// @Router /api/v1/{{$.Name}}/{{.SwaggerRoute}} [{{.Method}}]
func (h *{{$.HandlerName}}) {{.Name}}(c *fiber.Ctx) error {
	header := metadata.New(map[string]string{"authorization": "saeed"})
	ctx := metadata.NewOutgoingContext(c.Context(), header)
	var reqDto {{$.PB}}.{{.In}}
	{{if .Query}}_ = c.QueryParser(&reqDto){{end}}
	{{if .Param}}_ = c.ParamsParser(&reqDto){{end}}
	{{if .Body}}_ = c.BodyParser(&reqDto){{end}}
	res, err := h.pb.{{.Name}}(ctx, &reqDto)
	if err != nil {
		st, _ := status.FromError(err)
		log.Println("err:", st.Code(), st.Message(), st.Details())
		return c.Status(fiber.StatusBadRequest).Send(nil)
	}
	return c.JSON(res)
}
{{ end }}
{{ end }}


